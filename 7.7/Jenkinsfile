@Library('DSOP@master')_

pipeline {
  agent { label 'master' }

  environment {
    NEXUS_SERVER = credentials('NexusServerAddress')
    OSCAP_NODE = credentials('OpenSCAPNode')
    DOCKER_TAG = "${BASE}"
    NEXUS_URL = "nexus-docker.52.61.140.4.nip.io"
    REPO_NAME = "${NAMESPACE}/${DOCKER_TAG}"
  } //environment

    parameters {
    choice(choices : ['All','OpenSCAP','Twistlock','Anchore'],
          description: "Which tools to run?",
          name: 'toolsToRun')

    choice(choices : ['Test','Production'],
          description: "Is this a test run or for actual production?",
          name: 'testOrProduction')

    string(defaultValue: "latest",
            name: 'IMAGE_TAG',
            description: "Image tag to be used by Docker, Nexus and all Scanning tools")
    
    string(defaultValue: "ubi",
            name: 'PROJECT',
            description: "Project name to use under Vendor")

    string(defaultValue: "v7.6",
            name: 'VERSION',
            description: "Image tag to be used by Docker, Nexus and all Scanning tools")
  
    string(defaultValue: "ubi7",
            name: 'BASE',
            description: "Base image upon which to build container")
    
    string(defaultValue: "master",
            name: 'BRANCH',
            description: "DCCSCR branch to clone and build")
            
    string(defaultValue: "dsop",
           name: 'NAMESPACE',
           description: "Which nexus namespace to push to")

    choice(name: 'VENDOR_PRODUCT',
           choices: ['redhat', 'cyberfactory', 'dsop',
                     'gitlab', 'opensource', 'anchore',
                     'twistlock'],
           description: 'What vendor is being scanned')
  } // parameters
  
  stages {
    stage('Build') {
      steps {
        script {
          log.info('Building Container from Source')
	      try {
	  	    buildPlugin vendor: "${VENDOR_PRODUCT}", project: "${PROJECT}", version: "${VERSION}", branch: "${BRANCH}"
	      } catch (Exception e) {
	      	  log.error("${e}")
          } // try/catch
        } // script
      } // steps
    } // stage

    stage('Functional Test - ToDo') {
      steps {
        script {
          log.info('ToDo')
        } // script
      } // steps
    } // stage


    stage('Push to Registry') { 
      steps {
        script {
	  log.info('Pushing container to registry')
	    try {
                pushPlugin()
	    } catch (Exception e) {
	        log.error("${e}")
	  } // try/catch
        } // script
      } // steps
    } // stage

    stage('Call Image Scanning Pipeline') {
      steps {
        script {
          log.info('Calling scanning pipeline')
          scanningIntegrationPlugin()
        }
      } // steps
    } // stage
  } //stages
} //pipeline
